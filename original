//
//  ViewController.swift
//  Calculadora
//
//  Created by Diego  lopez on 9/25/18.
//  Copyright Â© 2018 Diego_Lopez. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    var PLUS_TAG: Int = 10
    var MINUS_TAG: Int = 20
    var MUL_TAG: Int = 30
    var DIV_TAG: Int = 40
    var EQL_TAG: Int = 50
    var AC_TAG: Int = 100
    var PER_TAG: Int = 60
    var PLUS_MINUS_TAG: Int = 70
    var NO_OPERATOR_PRESSED: Int = 1000
    var MAX_RESULT_LENTGH = 12
    
    
    
    @IBOutlet weak var resultArea: UILabel!
    
    var hasDot: Bool = false
    var isOperatorPressed: Bool = false
    var isEqlPressed: Bool = false
    var pressedOperator: Int!
    var num1: Double = 0
    var num2: Double = 0
    var ans: Double = 0

    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setToInit();
        
        // Do any additional setup after loading the view, typically from a nib.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    @IBAction func btnACclick(_ sender: UIButton) {
        setToInit()
    }
    
    @IBAction func numbers(_ sender: UIButton) {
        //var a: Int!
        if(isOperatorPressed){
            num1 = Double(resultArea.text!)!
            resultArea.text = "0"
            isOperatorPressed = false
        }
        
        if(isEqlPressed){
            setToInit()
        }
        
        if(resultArea.text == "0"){
            if(sender.tag == -1)
            {
                resultArea.text?.append(".")
                hasDot = true
            }
            else {
                resultArea.text = String(sender.tag)
            }
            
        } else {
            if(sender.tag == -1 && !hasDot && (resultArea.text?.count)! < MAX_RESULT_LENTGH - 1)
            {
                resultArea.text?.append(".")
                hasDot = true
            }
            if( sender.tag != -1 && (resultArea.text?.count)! < MAX_RESULT_LENTGH){
                resultArea.text?.append(String(sender.tag))
            }
            
        }
        
    }
    
    @IBAction func btnEqlClick(_ sender: UIButton) {
        num2 = Double(resultArea.text!)!
        ans = performOperation(num1: num1, num2: num2, OPR_TAG: pressedOperator)
        resultArea.text = doubleRound(result: ans)
        isEqlPressed = true
    }
    
    
    
    
    
    @IBAction func btnPerClick(_ sender: UIButton) {
        resultArea.text = String(doubleRound(result: Double(resultArea.text!)!/100))
    }
    
    
    @IBAction func btn_operators(_ sender: UIButton){
        
        // sender.backgroundColor = UIColor(red: 0x00, green: 0x7A, blue: 0x80, alpha: 0xCC)
        if(num1 != 0){
            num2 = Double(resultArea.text!)!
            ans = performOperation(num1: num1, num2: num2, OPR_TAG: pressedOperator)
            //                num2 = performOperation(num1: num1, num2: num2, OPR_TAG: pressedOperator)
            resultArea.text = doubleRound(result: ans)
            isOperatorPressed = false
        }
        isOperatorPressed = true
        
        switch sender.tag {
        case PLUS_TAG:
            pressedOperator = PLUS_TAG
            break;
        case MINUS_TAG:
            pressedOperator = MINUS_TAG
            break;
        case MUL_TAG:
            pressedOperator = MUL_TAG
            break;
        case DIV_TAG:
            pressedOperator = DIV_TAG
            break;
        default:
            pressedOperator = NO_OPERATOR_PRESSED
            break;
        }
        
    }
    
    
    
    //set Calculator to default state
    func setToInit(){
        
        resultArea.text = "0"
        hasDot = false
        isOperatorPressed = false
        isEqlPressed = false
        pressedOperator = 1000
        num1 = 0
        num2 = 0
        // set operators to null
        
    }
    
    func performOperation(num1: Double, num2: Double, OPR_TAG: Int) -> Double{
        var ans: Double = 0;
        
        switch OPR_TAG {
        case PLUS_TAG:
            ans = num1+num2
            
            break;
        case MINUS_TAG:
            ans = num1-num2
            
            break;
        case MUL_TAG:
            ans = num1*num2
            
            break;
        case DIV_TAG:
            //if (num2 != 0) { ans = num1/num2 }
            //else { ans = 0 }
            ans = num1/num2
            break;
        default:
            break;
        }
        return ans
    }
    
    func doubleRound(result: Double) -> String {
        let finalAns = String(format: "%g", result)
        return finalAns
    }

    
    
    
    


}

